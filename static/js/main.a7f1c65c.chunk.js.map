{"version":3,"sources":["features/Header/Header.tsx","features/character/Character.tsx","features/character/characterSlice.ts","features/sidebar/Sidebar.tsx","features/character/Characters.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/sidebar/sidebarSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["Header","props","Navbar","style","height","bg","expand","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","color","Character","useState","show","setShow","handleClose","Button","fontSize","variant","onClick","Image","width","src","image","rounded","display","overflow","name","Modal","centered","onHide","closeButton","Title","ListGroup","Item","species","gender","status","location","Footer","characterApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getCharacters","query","getCharacterById","getCharacterByName","useGetCharacterByNameQuery","useGetCharactersQuery","useGetCharacterByIdQuery","Sidebar","Offcanvas","placement","Body","Characters","inputVal","state","setstate","data","error","isLoading","isSuccess","isError","useDispatch","padding","justifyContent","onSubmit","e","preventDefault","target","elements","findChar","value","console","log","background","border","type","placeholder","results","map","user","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","initialState","reducers","increment","decrement","incrementByAmount","action","payload","extraReducers","addCase","pending","fulfilled","actions","sidebarSlice","addCharacter","push","deleteCharacter","character","store","configureStore","reducer","counter","counterReducer","myCharacters","sidebarReducer","middleware","getDefaultMiddleware","concat","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a7f1c65c.chunk.js","sourcesContent":["import { Navbar, Container, NavDropdown, Nav, Image} from \"react-bootstrap\";\n\nimport React from 'react'\n\ninterface Props {\n    \n}\n\nexport const Header = (props: Props) => {\n    return (\n        <>\n            <Navbar style={{height: '3em'}} bg='dark' expand=\"lg\">\n  <Container>\n  <Navbar.Brand href=\"#home\">\n{/* https://i.pinimg.com/originals/f1/5d/c4/f15dc41a01e84e775c9b5130fa1c9633.jpg */}\n      {/* <img\n        src=\"https://banner2.cleanpng.com/20180402/rqe/kisspng-rick-sanchez-t-shirt-morty-smith-drawing-clip-art-rick-and-morty-5ac21f428a7993.1712972215226714265672.jpg\"\n        width=\"50\"\n        height=\"50\"\n        className=\"d-inline-block align-top\"\n        alt=\"React Bootstrap logo\"\n      /> */}\n            </Navbar.Brand>\n            {/* <Image src=\"/public/rm1.png\" /> */}\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"me-auto\">\n        <Nav.Link style={{color: 'white'}} href=\"#home\">Home</Nav.Link>\n        {/* <Nav.Link href=\"#link\">Link</Nav.Link>\n        <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n          <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n          <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n          <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n        </NavDropdown> */}\n      </Nav>\n    </Navbar.Collapse>\n  </Container>\n</Navbar>\n        </>\n    )\n}\n","import React, { useState } from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Modal from 'react-bootstrap/Modal';\nimport Image from 'react-bootstrap/Image';\n\ninterface Props {\n  name: string;\n  image: string;\n  status?: string;\n  species: string;\n  gender: string;\n  location?: string;\n}\n\nexport const Character = (props: Props) => {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <div>\n      <Button style={{ fontSize: '.9em' }} variant=\"dark\" onClick={handleShow}>\n        <Image style={{ width: '6rem' }} src={props.image} rounded />\n        <span style={{ fontSize: '.8em', display: 'grid', overflow: 'hidden' }}>\n        {props.name}\n        </span>\n      </Button>\n\n      <Modal centered show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>{props.name}</Modal.Title>\n        </Modal.Header>\n        <div style={{display: 'flex', fontSize: '.7em', width: '100%'}}>\n\n          <Image style={{ height: '10rem', width: '9rem' }} src={props.image} />\n          \n\n        <ListGroup variant=\"flush\" style={{width: '100%'}}>\n          <ListGroup.Item>Species: {props.species}</ListGroup.Item>\n          <ListGroup.Item>Gender: {props.gender}</ListGroup.Item>\n          <ListGroup.Item>Status: {props.status}</ListGroup.Item>\n          <ListGroup.Item>Located: {props.location}</ListGroup.Item>\n        </ListGroup>\n          </div>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Add Character\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\ninterface Character {\n    results: {\n        id: number;\n        name: string;\n        species: string;\n        status?: string;\n        image: string;\n        gender: string;\n      location: {\n          name: string;\n        }\n    }[];\n}\n\n// Define a service using a base URL and expected endpoints\nexport const characterApi = createApi({\n  reducerPath: 'characterApi',\n  baseQuery: fetchBaseQuery({ baseUrl: 'https://rickandmortyapi.com/api/' }),\n  endpoints: (builder) => ({\n    getCharacters: builder.query<Character, number>({\n      query: () => `character/`,\n    }),\n    getCharacterById: builder.query<Character, number>({\n      query: (id) => `character/${id}`,\n    }),\n    getCharacterByName: builder.query<Character, string>({\n      query: (name) => `character/?name=${name}`,\n    }),\n  }),\n})\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const { useGetCharactersQuery } = characterApi\nexport const { useGetCharacterByIdQuery } = characterApi\nexport const { useGetCharacterByNameQuery } = characterApi","import react, { useState } from 'react';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\nimport Button from 'react-bootstrap/Button'\n\n export const Sidebar = () => {\n    const [show, setShow] = useState(false);\n  \n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n  \n    return (\n      <>\n        <Button variant=\"primary\" onClick={handleShow}>\n          My Characters\n        </Button>\n  \n        <Offcanvas placement={'end'} show={show} onHide={handleClose}>\n          <Offcanvas.Header closeButton>\n            <Offcanvas.Title>Offcanvas</Offcanvas.Title>\n          </Offcanvas.Header>\n          <Offcanvas.Body>\n            Some text as placeholder. In real life you can have the elements you\n            have chosen. Like, text, images, lists, etc.\n          </Offcanvas.Body>\n        </Offcanvas>\n      </>\n    );\n  }","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Character } from './Character'\nimport { useGetCharacterByIdQuery, useGetCharacterByNameQuery } from './characterSlice'\nimport './Characters.css';\nimport { Sidebar } from '../sidebar/Sidebar';\nimport { addCharacter } from '../sidebar/sidebarSlice';\n\n\nexport default function Characters() {\n    const [state, setstate] = useState('')\n    const { data, error, isLoading, isSuccess, isError } = useGetCharacterByNameQuery(state)\n\n    let inputVal\n    const getCharacter = (e: any) => {\n        e.preventDefault();\n        inputVal = e.target.elements.findChar.value\n        console.log(inputVal)\n        setstate(inputVal)\n    }\n\n    const dispatch = useDispatch\n    // Trying to get this to work with sidebarslice\n    // const addC = (id: number) => {\n    //     dispatch(addCharacter())\n    // }\n\n    return (\n        <div style={{ padding: '2em' }}>\n            <span style={{ display: 'flex', fontSize: '.7em', justifyContent: 'space-between' }}>\n                <form onSubmit={getCharacter}>\n                    <input style={{ color: 'blue', background: '#F0FFFF', height: '100%', border: 'none' }} type='text' name='findChar' placeholder='Enter Character Name' />\n                </form>\n                <Sidebar />\n            </span>\n            <br />\n            {console.log(data)}\n            <div className='wrapper'>\n                {isLoading && 'Loading...'}\n                {isError && error}\n                {isSuccess && data && data?.results.map(user =>\n                    <Character\n                        name={user.name}\n                        image={user.image}\n                        species={user.species}\n                        gender={user.gender}\n                        status={user.status}\n                        location={user.location.name}\n                    />\n                )}\n            </div>\n        {/* <button onClick={() => }></button> */}\n        </div>\n    );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\nimport { Header } from './features/Header/Header';\nimport Characters from './features/character/Characters';\n// import { Character } from './features/character/Character';\n// import './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Characters/>\n    </>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface Mycharacters {\n    results: {\n        id?: number;\n        name?: string;\n        species?: string;\n        status?: string;\n        image?: string;\n        gender?: string;\n      location?: {\n          name?: string;\n        }\n    }[];\n}\n\n\nconst initialState: Mycharacters = {\n    results: []\n}\n\n\nconst sidebarSlice = createSlice({\n    name: 'mycharacters',\n    initialState,\n    reducers: {\n        //add a character\n        addCharacter: (state: any, action: any) => {\n            state.results.push(action.payload)\n            \n      },\n        // delete a character\n        deleteCharacter(character: object) {\n            console.log(character)\n      },\n    },\n})\n\nexport const { addCharacter, deleteCharacter } = sidebarSlice.actions\nexport default sidebarSlice.reducer","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { characterApi } from '../features/character/characterSlice';\nimport counterReducer from '../features/counter/counterSlice';\nimport sidebarReducer from '../features/sidebar/sidebarSlice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    myCharacters: sidebarReducer,\n    [characterApi.reducerPath]: characterApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(characterApi.middleware),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}